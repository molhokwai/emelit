#!/usr/bin/env python
# -*- coding: utf8 -*-
print "##################################################################"
print "#    web2py plugins download macro and processing                #"
print "#    --------------------------------------------                #"
print "#    Script to generate kantu macro addon|plugin json for        #"
print "#    automatic web2py plugins download and processing            #"
print "#    (commit, push)                                              #"
print "#                                                                #"
print "#    Usage:                                                      #"
print "#    ------                                                      #"
print "#    -   ./process [action]  [app_name] [web2py app/site url]    #"
print "#                                                                #"
print "#    Calls:                                                      #"
print "#    ------                                                      #"
print "#        ./process macro projectmia                              #"
print "#                  https://.../.../admin/design/emelit#plugins   #"
print "#        ./process macro projectmia                              #"
print "#                  https://.../.../admin/design/emelit#plugins   #"
print "#                  upload                                        #"
print "#                  https://.../.../admin/design/emelit           #"
print "#            generates plugins download | upload macros json     #"
print "#            (kantu macro addon|plugin)                          #"
print "#        ./process file projectmia                               #"
print "#            generates plugins local placeholder files           #"
print "#            (kantu macro addon|plugin)                          #"
print "#        ./process download                                      #"
print "#            process downloaded plugins:                         #"
print "#            - move to plugin folder                             #"
print "#            - uploads (to gdrive, could be github...)           #"
print "#                                                                #"
print "#        complete command samples:                                #"
print "#            - download macro json generation: ./process macro projectmia https://molhokwwai.pythonanywhere.com/admin/design/emelit#plugins       #"
print "#            - upload macro json generation: ./process macro projectmia http://127.0.0.1:8000/admin/design/emelit#plugins upload http://127.0.0.1:8000/admin/design/emelit                        #"
print "#                                                                #"
print "#                                                                #"
print "##################################################################"


import sys, os, re, json, datetime


###############
#   HELPERS   #
###############
from helpers import MacroPathHelper


###############
#   CONFIG    #
###############
from config import plugins, macro_path_config


###############
#   PROCESS   #
###############
## arguments
a = ''
name = ''
url = 'https://molhokwai.pythonanywhere.com/admin/design/emelit#plugins'
args = []

i = 0
for arg in sys.argv:    
    if i == 1: a = arg
    elif i == 2: name = arg
    elif i == 3: url = arg
    elif i > 3: args.append(arg)

    i += 1


## process
print
print
print 'Begin...'
print

l = plugins.get(name, plugins['all'])
if len(re.findall(r'plugin|file', a)):
    print 'Writing files...'
    for item in l:
        if not os.path.exists(name):
            os.makedirs(name)
        open(os.path.join(name, '%s.py' % item), 'w').write('')


if len(re.findall(r'json|macro', a)):
    print 'Writing macro json...'
    
    _a = args[0] if len(args)>0 else 'download'
    macro_path = MacroPathHelper(macro_path_config, name)
    commands = open(macro_path.get_command_path(which=_a)).read()
    output = json.loads(open(macro_path.base).read() % dict(
        date_time=datetime.datetime.now().strftime('%Y-%m-%d'), url=url))
    
    for item in l:
        if _a in ('download'):
            output['Commands'] += json.loads(commands % dict(plugin_name=item))['Commands']
        else:
            # -Setting upload source not supported:
            #   upload_src = macro_path.get_transfer_path(item, which='upload')
            after_upload_url = args[1] if len(args)>1 else url
            output['Commands'] += json.loads(commands % 
                    dict(plugin_name=item,
                         after_upload_url=after_upload_url)
            )['Commands']
    output['Commands'] += json.loads(open(macro_path.end_commands).read())['Commands']
    
    open(os.path.join(macro_path.output % _a), 'w').write(json.dumps(output, indent=4))


if len(re.findall(r'download', a)):
    print 'Processing downloads...'
    
    macro_path = MacroPathHelper(macro_path_config, '')
    
    _fs = filter(lambda x: os.path.exists(x), map(lambda x: macro_path.get_transfer_path(x), l))
    if _fs:
        _fs = ' '.join(_fs)
        os.system('mv %(files)s %(dest)s' % dict(files=_fs, dest=macro_path.script_path))
        os.system('drive push')

        print 'Enter git commit message:'
        os.system('%s %s' % (macro_path.git_script_path, '"%s"' % raw_input()))
    else:
        print 'No downloads'


print
print 'Done.'
print
print
